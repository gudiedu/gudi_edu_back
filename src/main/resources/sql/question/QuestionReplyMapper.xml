<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.happyjob.study.tCourse.dao.QuestionReplyDao"> 


<!-- qna 답변부분 리스트로 조회 -->
	<select id="listquestionreply" resultType="kr.happyjob.study.tCourse.model.QuestionReplyVO">
		/*kr.happyjob.study.tCourse.dao.questionDao.listquestionreply*/
		SELECT
		   r.loginID,
           r.course_no,
           r.name,
           r.reply_no,
           r.reply_content,
           DATE_FORMAT(r.reply_created_at, '%Y-%m-%d') as reply_created_at,
		   ui.loginID,
		   r.is_updated
		   
			FROM tb_question_reply r LEFT JOIN tb_userinfo ui ON r.loginId = ui.loginID
			WHERE r.question_no = #{question_no}
       <!-- select 
       
           c.course_no,
           q.question_no,
           r.loginID,
           r.course_no,
           r.name,
           r.reply_no,
           r.reply_content,
           DATE_FORMAT(r.reply_created_at, '%Y-%m-%d') as reply_created_at
             , ui.name as writer
     
       from tb_question q
       
              inner join tb_userinfo ui on ui.loginID = r.loginID
              left outer join tb_question_reply r on q.question_no = r.question_no
              inner join tb_course c ON c.course_no = r.course_no
      where q.question_no = #{question_no} -->
		</select>

<!-- qna 모달 질문 내용 조회 -->
	<select id="selectquestionreply" resultType="kr.happyjob.study.tCourse.model.QuestionReplyVO">
		/*kr.happyjob.study.tCourse.dao.questionReplyDao.listquestion*/
		
        SELECT
       		   c.course_no
        	 , q.question_no
             , q.course_no
             , q.loginID
             , q.file_no
             , q.question_title
             , q.question_content
             , q.name
             , r.name
             , r.reply_no
  			 , r.reply_content
             , DATE_FORMAT(q.question_created_at, '%Y-%m-%d') as question_created_at
             , DATE_FORMAT(r.reply_created_at, '%Y-%m-%d') as reply_created_at   
             , r.is_updated   
     
       FROM  tb_question q<!-- tb_question_reply r -->
       
             
              INNER JOIN tb_question_reply r ON q.question_no = r.question_no
              INNER JOIN tb_course c ON c.course_no = q.course_no
              
              <!--
              <where>
                <if test="(stitle != null) and (!stitle.equals(''))">
                     and q.question_title like concat('%',#{stitle},'%')
                </if>
         
              </where>
				ORDER BY q.question_created_at DESC
    			LIMIT #{startpoint}, #{pageSize}  -->
    			
	
	</select>
	
	   <insert id="insertquestionreply">
	    <selectKey keyProperty="selreply" resultType="int" order="BEFORE"> 
	   	     SELECT IFNULL(MAX(reply_no),0) +1 
	   	     FROM tb_question_reply
             WHERE question_no = #{question_no}
	    </selectKey>
	       
	       
	       <!-- name어떻게 할지 고민해봐야할듯? -->
			 INSERT INTO tb_question_reply (
		        reply_no,
		        question_no,
		        loginID,
		        name,
		        reply_content,
		        reply_created_at,
		        course_no,
		        is_updated
		    ) 
		       VALUES (
		        #{selreply},
		        #{question_no},
		        #{loginID},
		        (SELECT name FROM tb_userinfo WHERE loginID = #{loginID}),
		        #{reply_content},
		        NOW(),
		        (SELECT course_no FROM tb_question WHERE question_no = #{question_no}),
		        false
		    )	   </insert>  
	
	<update id="updatequestionreply" >
	     UPDATE tb_question_reply
	          SET loginID = #{loginID}
                 , reply_content = #{reply_content}
                 , reply_created_at = now()
                 ,  is_updated = #{is_updated}
	     WHERE reply_no = #{reply_no}
	     	   AND question_no = #{question_no}
	</update>
	
<delete id="deletequestionreply">
    DELETE FROM tb_question_reply
    WHERE reply_no = #{reply_no}
      AND question_no = #{question_no}
</delete>
	
	
	
	
	</mapper>