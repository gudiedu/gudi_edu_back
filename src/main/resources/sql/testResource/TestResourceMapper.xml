<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.happyjob.study.tCourse.dao.ResourceDao">



	<!-- 학습자료 목록 조회 -->
	<select id="getResourceList"
		resultType="kr.happyjob.study.tCourse.model.LearningMaterialsDTO">
		SELECT
		r.resource_no,
		r.course_no,
		c.course_name,
		r.loginID,
		r.resource_title,
		r.resource_content,
		DATE_FORMAT(r.resource_created_at, '%Y-%m-%d') as resource_created_at,
		DATE_FORMAT(r.resource_edited_at, '%Y-%m-%d') as resource_edited_at,
		r.resource_writer,
		r.resource_editor,
		r.file_no,
		u.name
		FROM tb_resource r
		LEFT JOIN tb_course c ON r.course_no = c.course_no
		LEFT JOIN tb_userinfo u ON r.loginID = u.loginID
		<where>
			r.loginID = #{loginID}
			<if test="stitle != null and stitle != ''">
				AND (r.resource_title LIKE CONCAT('%', #{stitle}, '%')
				OR c.course_name LIKE CONCAT('%', #{stitle}, '%'))
			</if>
		</where>
		ORDER BY r.resource_created_at DESC
		LIMIT #{startPoint}, #{pageSize}
	</select>


	<!-- 학습자료 총 개수 조회 -->
	<select id="countResourceList" resultType="int">
		SELECT COUNT(*)
		FROM tb_resource r
		LEFT JOIN tb_course c ON r.course_no
		= c.course_no <!-- 강의 테이블과 조인 -->
		<where>
			r.loginID = #{loginID} <!-- loginID 조건 추가 -->
			<if test="stitle != null and stitle != ''">
				AND r.resource_title LIKE CONCAT('%', #{stitle}, '%')
			</if>
		</where>
	</select>



	<!-- 학습자료 등록 -->
	<insert id="addResource" parameterType="map">
		INSERT INTO tb_resource (
		resource_title,
		resource_content,
		resource_created_at,
		resource_writer,
		loginID,  <!-- loginID 추가 -->
		file_no,
		course_no  <!-- 추가된 컬럼 -->
		) VALUES (
		#{resource_title},
		#{resource_content},
		NOW(),
		#{resource_writer},
		#{loginID},  <!-- loginID 추가 -->
		#{file_no},
		#{course_no}  <!-- 추가된 컬럼 -->
		)
	</insert>



	<!-- 파일 저장 -->
	<insert id="resourceSaveFile"
		parameterType="kr.happyjob.study.tCourse.model.LearningMaterialsDTO"
		useGeneratedKeys="true" keyProperty="file_no">
		INSERT INTO tb_file (
		file_origin,
		file_local_path,
		file_server_path,
		file_size,
		file_extension
		) VALUES (
		#{file_origin},
		#{file_local_path},
		#{file_server_path},
		#{file_size},
		#{file_extension}
		)
	</insert>





	<select id="getCourseListByLoginID" parameterType="String"
		resultType="kr.happyjob.study.tCourse.model.LearningMaterialsDTO">
		SELECT
		course_no,
		course_name
		FROM tb_course
		WHERE loginID =
		#{loginID}
	</select>


	<select id="getResourceById"
		resultType="kr.happyjob.study.tCourse.model.LearningMaterialsDTO">
		SELECT
		r.resource_no,
		r.course_no,
		r.loginID,
		r.resource_title,
		r.resource_content,
		r.resource_created_at,
		r.resource_edited_at,
		r.resource_writer,
		r.resource_editor,
		r.file_no,
		f.file_origin,
		f.file_server_path,
		f.file_local_path,
		f.file_rename,
		f.file_extension,
		f.file_size,
		c.course_name
		FROM tb_resource r
		LEFT JOIN
		tb_file f ON r.file_no = f.file_no
		LEFT JOIN tb_course c ON r.course_no
		= c.course_no
		WHERE r.resource_no = #{resourceNo}
	</select>




	<update id="updateResource" parameterType="map">
		UPDATE tb_resource
		SET
		resource_title = #{resource_title},
		resource_content =
		#{resource_content},
		resource_edited_at = NOW(),
		resource_editor =
		#{resource_editor},
		file_no = #{file_no}
		WHERE resource_no =
		#{resource_no}
	</update>



	<delete id="deleteResource" parameterType="int">
		DELETE FROM
		tb_resource WHERE resource_no = #{resourceNo}
	</delete>




</mapper>