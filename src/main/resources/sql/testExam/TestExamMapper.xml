<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.happyjob.study.tCourse.dao.TestExamDao">

	<!-- 강의 정보와 시험 문제를 조회 -->
	<select id="examlist" resultType="kr.happyjob.study.tCourse.model.CourseVO">
		SELECT
		c.course_no,
		c.course_name,
		c.course_subject,
		COUNT(t.test_no) AS test_count
		FROM
		tb_course c
		LEFT JOIN
		tb_test t ON
		c.course_no = t.course_no
		<where>
			c.loginID = #{loginID}
			<if test="stitle != null and stitle != ''">
				AND c.course_name LIKE CONCAT('%', #{stitle}, '%')
			</if>
		</where>
		GROUP BY
		c.course_no, c.course_name
		ORDER BY
		c.course_start_date DESC
		LIMIT
		#{startPoint}, #{pageSize}
	</select>


	<!-- 총 강의 수를 조회 -->
	<select id="countexamlist" resultType="int">
		SELECT
		COUNT(DISTINCT c.course_no)
		FROM
		tb_course c
		LEFT JOIN
		tb_test t ON
		c.course_no = t.course_no
		<where>
			c.loginID = #{loginID}
			<if test="stitle != null and stitle != ''">
				AND c.course_name LIKE CONCAT('%', #{stitle}, '%')
			</if>
		</where>
	</select>


	<!-- 시험 등록 -->
	<insert id="registerExam"
		parameterType="kr.happyjob.study.tCourse.model.TestReslutSubmissionDTO">
		INSERT INTO tb_test (
		test_no,
		course_no,
		test_question,
		test_choice1,
		test_choice2,
		test_choice3,
		test_choice4,
		test_answer,
		test_score,
		test_category
		)
		SELECT
		IFNULL(MAX(test_no), 0) + 1,
		#{course_no},
		#{test_question},
		#{test_choice1},
		#{test_choice2},
		#{test_choice3},
		#{test_choice4},
		#{test_answer},
		#{test_score},
		#{test_category}
		FROM
		tb_test
	</insert>




	<!-- 시험 문제 총 개수 조회 -->
	<select id="countExamQuestions" parameterType="map" resultType="int">
		SELECT COUNT(*) FROM tb_test
		WHERE course_no = #{course_no}
	</select>



	<update id="updateExam"
		parameterType="kr.happyjob.study.tCourse.model.TestReslutSubmissionDTO">
		UPDATE tb_test
		SET
		course_no = #{course_no},
		test_question
		= #{test_question},
		test_choice1 = #{test_choice1},
		test_choice2 =
		#{test_choice2},
		test_choice3 = #{test_choice3},
		test_choice4 =
		#{test_choice4},
		test_answer = #{test_answer},
		test_score =
		#{test_score},
		test_category = #{test_category}
		WHERE
		test_no =
		#{test_no}
	</update>



	<!-- 시험 문제 삭제 -->
	<delete id="deleteExam" parameterType="int">
		DELETE FROM tb_test WHERE
		test_no = #{testNo}
	</delete>


	<!-- 시험 전체 삭제 쿼리 추가 -->
	<delete id="deleteExamByCategory" parameterType="map">
		DELETE FROM tb_test
		WHERE course_no = #{course_no} AND test_category = #{test_category}
	</delete>



	<!-- 문제 목록 조회 -->
	<select id="getExamQuestions" parameterType="map"
		resultType="kr.happyjob.study.tCourse.model.TestReslutSubmissionDTO">
		SELECT * FROM tb_test
		WHERE course_no = #{course_no}
		ORDER BY
		test_no DESC
		LIMIT
		#{startPoint}, #{pageSize}
	</select>


	<!-- 특정 강의의 시험 카테고리별 문제 개수를 조회하는 메서드 수정 -->
	<select id="getExamQuestionsByCategory" parameterType="map"
		resultType="kr.happyjob.study.tCourse.model.TestReslutSubmissionDTO">
		SELECT test_category, COUNT(test_no) AS question_count
		FROM
		tb_test
		WHERE course_no = #{course_no}
		GROUP BY test_category
	</select>




	<!-- 특정 강의에 특정 시험 카테고리가 존재하는지 확인 -->
	<select id="countCategoryByCourse" parameterType="map"
		resultType="int">
		SELECT COUNT(*) FROM tb_test
		WHERE course_no = #{course_no}
		AND test_category = #{test_category}
	</select>


	<!-- 특정 강의의 전체 시험 개수를 조회하는 메서드 -->
	<select id="countTotalExamsByCourse" parameterType="int"
		resultType="int">
		SELECT COUNT(*)
		FROM tb_test
		WHERE course_no = #{courseNo}
	</select>



	<select id="getExamFixCategory" parameterType="map"
		resultType="kr.happyjob.study.tCourse.model.TestReslutSubmissionDTO">
		SELECT * FROM tb_test
		WHERE course_no = #{course_no} AND
		test_category = #{test_category}
		ORDER BY test_no DESC
	</select>


	<select id="getTestCategoriesByCourse" parameterType="int"
		resultType="string">
		SELECT DISTINCT test_category
		FROM tb_test
		WHERE course_no =
		#{courseNo}
	</select>





</mapper>
