<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.happyjob.study.classroom.dao.SCourseDao">

<!-- 강의관리 : 학생이 수강하는 강의 목록 조회 -->
<select id="sStudentCourseInfo" resultType="kr.happyjob.study.classroom.dto.SCourseDto">
	SELECT ui.name AS student_name,
	       c.loginID,
	       ui2.name AS teacher_name,
	       c.course_no,
	       c.course_subject,
	       c.course_name,
	       c.course_start_date,
	       c.course_end_date,
	       e.enrollment_confirmed
	FROM tb_enrollment e
	LEFT OUTER JOIN tb_userinfo ui ON ui.loginID = e.loginID
	LEFT OUTER JOIN tb_course c ON c.course_no = e.course_no
	LEFT OUTER JOIN tb_userinfo ui2 ON ui2.loginID = c.loginID
	WHERE e.loginID = #{loginID}
	AND e.enrollment_confirmed = "Y"
</select>

<!-- 강의관리 출결 : 학생이 수강하는 특정 강의 내용 조회 -->
<select id="sStudentSelectedCourseInfo" resultType="kr.happyjob.study.classroom.dto.SCourseDto">
	SELECT c.loginID,
		   ui.name,
	       c.course_no,
	       c.course_subject,
	       c.course_name,
	       DATE_FORMAT(c.course_start_date , '%Y-%m-%d') as course_start_date,
	       DATE_FORMAT(c.course_end_date , '%Y-%m-%d') as course_end_date
	FROM tb_course c
	LEFT OUTER JOIN 
    	   tb_userinfo ui ON ui.loginID = c.loginID
	LEFT OUTER JOIN
	       tb_attendance a ON a.course_no = c.course_no
	WHERE a.loginID = #{loginID}
	AND a.course_no = #{pCourseNo}
	GROUP BY a.loginID, c.course_no
</select>

<!-- 강의관리 출결 : 학생 출결(출석한 횟수) -->
<select id="sAttendanceDays" resultType="int">
	SELECT count(*)
	FROM tb_attendance a
	LEFT OUTER JOIN
	     tb_userinfo ui ON ui.loginID = a.loginID
	LEFT OUTER JOIN
	     tb_course c ON c.course_no = a.course_no
	WHERE a.loginID = #{loginID}
	AND a.course_no = #{pCourseNo}
	AND a.attendance_status = "출석"
</select>

<!-- 강의관리 출결 : 학생 출결(결석한 횟수) -->
<select id="sAbsenceDays" resultType="int">
	SELECT count(*)
	FROM tb_attendance a
	LEFT OUTER JOIN
	     tb_userinfo ui ON ui.loginID = a.loginID
	LEFT OUTER JOIN
	     tb_course c ON c.course_no = a.course_no
	WHERE a.loginID = #{loginID}
	AND a.course_no = #{pCourseNo}
	AND a.attendance_status = "결석"
</select>

<!-- 강의관리 출결 : 학생 출결(지각, 결석한 것만) -->
<select id="sAttendanceNotes" resultType="kr.happyjob.study.classroom.dto.SCourseDto">
	SELECT ui.loginID,
	       a.attendance_no,
	       a.course_no,
	       DATE_FORMAT(a.attendance_date , '%Y-%m-%d') as attendance_date,
	       a.attendance_status,
	       c.course_subject,
	       c.course_name,
	       c.course_start_date,
	       c.course_end_date
	FROM tb_attendance a
	LEFT OUTER JOIN
	     tb_userinfo ui ON ui.loginID = a.loginID
	LEFT OUTER JOIN
	     tb_course c ON c.course_no = a.course_no
	WHERE a.loginID = #{loginID}
	AND a.course_no = #{pCourseNo}
	AND (a.attendance_status = "지각" OR a.attendance_status = "결석")
	ORDER BY attendance_date ASC
</select>

<!-- 강의관리 출결 : 공휴일 및 휴강일 -->
<select id="sDayoffInfo" resultType="kr.happyjob.study.classroom.model.SDayoffModel">
	SELECT DATE_FORMAT(d.dayoff_date , '%Y-%m-%d') as dayoff_date
	FROM tb_dayoff d
</select>

<!-- 특정 강의 정보 조회 -->

<select id="sCourseInfo" resultType="kr.happyjob.study.classroom.dto.SCourseDto">
	SELECT
	  c.course_no
	  , c.course_name
	  , ui.name
	  , c.course_loc
	  , c.course_description
	  , DATE_FORMAT(c.course_start_date, '%Y-%m-%d') AS course_start_date
	  , DATE_FORMAT(c.course_end_date, '%Y-%m-%d') AS course_end_date
	  , c.course_quota
	FROM
	  tb_course c
	LEFT OUTER JOIN tb_userinfo ui ON ui.loginID = c.loginID
	WHERE c.course_no = #{courseNo}
</select>


<!-- 강의 세부 정보 조회 -->

<select id="sCourseDetail" resultType="kr.happyjob.study.classroom.dto.SCourseDto">
	SELECT
		course_no
		, course_detail_week_no
		, course_detail_goal
		, course_detail_content
	FROM
		tb_course_detail
	WHERE
		course_no = #{courseNo}
	ORDER BY
  		course_detail_week_no ASC
</select>

<!-- 수강신청 가능 강의 목록 조회  -->

<select id="sEnrollList" resultType="kr.happyjob.study.classroom.dto.SCourseDto">
	SELECT
	  c.course_no,
	  ui.name,
	  c.course_subject,
	  c.course_name,
	  c.course_quota,
	  DATE_FORMAT(c.course_start_date, '%Y-%m-%d') AS course_start_date,
	  DATE_FORMAT(c.course_end_date, '%Y-%m-%d') AS course_end_date,
	  c.course_loc
	FROM
	  tb_course c
	LEFT OUTER JOIN tb_userinfo ui ON ui.loginID = c.loginID
	WHERE
	  course_start_date > now()
	ORDER BY
	  course_start_date ASC;
</select>

<!-- 수강신청하기 -->
<insert id="sEnrollInsert">
	INSERT INTO tb_enrollment
				(
					course_no
					, loginID
					, enrollment_confirmed					
				) VALUES (
					#{openedNo}, 
					#{studentSignedID},
					'N'
				)
</insert>

<!-- 시험응시 관련 리스트 조회 -->
<select id="sTestList" resultType="kr.happyjob.study.classroom.dto.SCourseDto">
	SELECT
		e.course_no
		, c.course_subject
		, c.course_name
		, ui.name
		, c.course_loc
		, r.result_no
		, r.loginID
		, r.result_score
		, t.test_category
	FROM
		tb_enrollment e
	LEFT OUTER JOIN tb_course c ON c.course_no = e.course_no
	LEFT OUTER JOIN tb_userinfo ui ON ui.loginID = c.loginID
	LEFT OUTER JOIN tb_test_result r ON r.course_no = c.course_no
	LEFT OUTER JOIN tb_test t ON t.course_no = c.course_no
	WHERE
		e.loginID = #{studentSignedID}
	GROUP BY c.course_no, t.test_category
	ORDER BY c.course_start_date DESC

</select>

<!-- 시험 문제 불러오기 -->
<select id="sCreateTest" resultType="kr.happyjob.study.classroom.dto.SCourseDto">
	SELECT
	  course_no
	  , test_no
	  , test_question
	  , test_choice1
	  , test_choice2
	  , test_choice3
	  , test_choice4
	  , test_score
	  , test_category
	FROM
	  tb_test
	WHERE
	  course_no = #{SelectedCourseNo} AND test_category = #{SelectedTestCategory}
</select>


<!-- 시험응시 제출하기 <insert id="sTestSubmit">
	INSERT INTO 
</insert> -->



</mapper>